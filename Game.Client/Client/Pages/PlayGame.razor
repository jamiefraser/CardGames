@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel
@inject Game.Client.Shared.Services.SignalRService.ISignalRService rtc;
@inject Game.Client.Shared.ViewModels.IPlayGameViewModel vm;
@inject Game.Client.Shared.Services.CurrentUser.ICurrentUserService currentUserService;
@page "/games/play/{TableId}"
@if (vm.Table == null)
{
    <p>Initializing....</p>
}
else
{
    if (vm.Table.TableOwner.PrincipalId.Equals(currentUserService.CurrentClaimsPrincipalOid))
    {
        /*Players Requesting Entry Dropdown and Admit Button */
        <div class="flex-grid" hidden="@vm.PlayersRequestingEntry.Count==0">
            <div class="col" />
            <div class="col" style="align-items:flex-end">
                <SfListBox DataSource="vm.PlayersRequestingEntry"
                           TItem="Entities.Player"
                           TValue="string"
                           Value="SelectedPlayers"
                           @ref="PlayersRequestingEntry">
                    <ListBoxFieldSettings Text="PrincipalName"
                                          Value="PrincipalId" />
                    <ListBoxEvents TValue="string"
                                   TItem="Entities.Player"
                                   ValueChange="SelectedRequestingPlayerChanged" />
                </SfListBox>
                <Syncfusion.Blazor.Buttons.SfButton OnClick="admitClicked">
                    Admit!
                </Syncfusion.Blazor.Buttons.SfButton>
            </div>
        </div>
    }
    else
    {
        /*Greeting message*/
        <div class="flex-grid">
            <div class="col">
                <p>Hello Friend.  Let's play!</p>
            </div>
            <div class="col" style="align-items:flex-end">
                <SfListBox DataSource="vm.Players"
                           TItem="Entities.Player"
                           TValue="string"
                           Value="SelectedPlayer"
                           @ref="Players">
                    <ListBoxFieldSettings Text="PrincipalName"
                                          Value="PrincipalId" />
                </SfListBox>
            </div>
        </div>
    }
}
<table width="100%" style="position:absolute">
    <tr style="background-color:aqua">
        <td>
            <div style="background-color:aqua;width:100%;height:calc(50vw);position:relative">
                @{
                    var counter = 0;
                    foreach (Entities.Player p in vm.Table.Players)
                    {
                        Console.WriteLine($"{p.PrincipalName} has {p.Hand.Count()} cards in their hand.  Counter is equal to {counter}");
                        <div class="playingCards fourColours rotateHand simpleCards" style="position:absolute;top:calc(25vh * @Math.Sin(Radians * counter));left:calc(25vw * @Math.Cos(Radians * counter));">
                            <div class="table">
                                <div>
                                    @if (p.PrincipalId == currentUserService.CurrentClaimsPrincipalOid)
                                    {
                                        <Hand Cards="p.Hand" DeckType="vm.Table.Game.DeckType" MyHand="true" />
                                    }
                                    else
                                    {
                                        <div class="table" style="position:absolute;top:calc(25vh * @Math.Sin(Radians * counter));left:calc(25vw * @Math.Cos(Radians * counter));">
                                            <div>
                                                <Hand Cards="p.Hand" DeckType="vm.Table.Game.DeckType" MyHand="false" />
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        counter++;
                    }
                }
            </div>
        </td>
    </tr>
    <tr style="background-color:red">
        <table width="100%">
            <tr>
                <td>
                    <div class="playingCards fourColours rotateHand simpleCards">
                        <Deck Cards="@vm.Table.Deck.Cards" />
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="flex-grid" hidden="@(!vm.Started)">
                        <div class="flex-row" style="align-content:flex-end">
                            <Syncfusion.Blazor.Buttons.SfButton OnClick="dealClicked" Disabled="@(vm.CanStartGame)">
                                Deal!
                            </Syncfusion.Blazor.Buttons.SfButton>
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </tr>
</table>

        @**@
    <div class="flex-grid" hidden="@vm.Started">
        <div class="flex-row" style="align-content:flex-end">
            <Syncfusion.Blazor.Buttons.SfButton OnClick="startGameClicked" Disabled="@(!vm.CanStartGame)">
                Start Game!
            </Syncfusion.Blazor.Buttons.SfButton>
        </div>
    </div>

    <style>
        .rest {
            margin-left: -25px;
        }
    </style>
    @code
{
        [Parameter]
        public string TableId { get; set; }

        public int Radians;
        public string SelectedPlayers { get; set; }
        public string SelectedPlayer { get; set; }
        public Syncfusion.Blazor.DropDowns.SfListBox<string, Entities.Player> PlayersRequestingEntry;
        public Syncfusion.Blazor.DropDowns.SfListBox<string, Entities.Player> Players;
        protected override async Task OnInitializedAsync()
        {
            vm.PropertyChanged += vmPropertyChanged;
            await InvokeAsync(() => vm.Initialize(TableId));
            Radians = 360 / vm.Table.Players.Count;
            Console.WriteLine($"The game {(vm.Started ? "has" : "has not")} started");
        }
        protected override async void OnParametersSet()
        {
            base.OnParametersSet();
        }
        public void SelectedRequestingPlayerChanged(ListBoxChangeEventArgs<string, Entities.Player> args)
        {
            if (PlayersRequestingEntry.Value == null) return;
            var x = PlayersRequestingEntry.Value;
            vm.PlayerToAdmit = PlayersRequestingEntry.GetDataByValue(x).FirstOrDefault();
            StateHasChanged();
        }
        private async void vmPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            await InvokeAsync(() => StateHasChanged());
        }
        private async void dealClicked(MouseEventArgs args)
        {
            await vm.Deal();
            await InvokeAsync(() => StateHasChanged());
        }
        private async void admitClicked(MouseEventArgs args)
        {
            await vm.Admit();
            await InvokeAsync(() => StateHasChanged());
        }
        private async void startGameClicked(MouseEventArgs args)
        {
            await vm.StartGame();
            await InvokeAsync(() => StateHasChanged());
        }
    }
