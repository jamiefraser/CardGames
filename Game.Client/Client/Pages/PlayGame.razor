@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel
@inject Game.Client.Shared.Services.SignalRService.ISignalRService rtc;
@inject Game.Client.Shared.ViewModels.IPlayGameViewModel vm;
@inject Game.Client.Shared.Services.CurrentUser.ICurrentUserService currentUserService;
@inject IJSRuntime js;
@page "/games/play/{TableId}"
@if (vm.Table == null)
{
    <p>Initializing....</p>
}
else
{
    if (vm.Table.TableOwner.PrincipalId.Equals(currentUserService.CurrentClaimsPrincipalOid))
    {
        if (!vm.Started)
        {
            /*Players Requesting Entry Dropdown and Admit Button */
            <div class="flex-grid">
                <div class="col" />
                <div class="col">
                    <SfListBox DataSource="vm.PlayersRequestingEntry"
                               TItem="Entities.Player"
                               TValue="string"
                               Value="SelectedPlayers"
                               @ref="PlayersRequestingEntry">
                        <ListBoxFieldSettings Text="PrincipalName"
                                              Value="PrincipalId" />
                        <ListBoxEvents TValue="string"
                                       TItem="Entities.Player"
                                       ValueChange="SelectedRequestingPlayerChanged" />
                    </SfListBox>
                    <Syncfusion.Blazor.Buttons.SfButton OnClick="admitClicked">
                        Admit!
                    </Syncfusion.Blazor.Buttons.SfButton>
                </div>
            </div>
            <div hidden="@vm.Started">
                <div>
                    <Syncfusion.Blazor.Buttons.SfButton OnClick="startGameClicked" Disabled="@(!vm.CanStartGame)">
                        Start Game!
                    </Syncfusion.Blazor.Buttons.SfButton>
                </div>
            </div>
        }
        else
        {
                <FlatTableFlatHands vm="@vm" />
        }
    }
    else
    {
        if (vm.Started)
        {
            <FlatTableFlatHands vm="@vm" />
        }
        else
        {
            <div class="flex-grid" style="float:left">
                <div class="col">
                    Hang tight - the game will start when everybody has arrived.
                </div>
                <div class="col" style="align-items:flex-end">
                    <SfListBox DataSource="vm.Players.Values"
                               TItem="Entities.Player"
                               TValue="string"
                               Value="SelectedPlayer"
                               @ref="Players">
                        <ListBoxFieldSettings Text="PrincipalName"
                                              Value="PrincipalId" />
                    </SfListBox>
                </div>
            </div>
        }
    }
    @*else
        {
            /*Greeting message*/

        }*@
}
<style>
    .rest {
        margin-left: -25px;
    }
</style>
@code
{
    [Parameter]
    public string TableId { get; set; }



    public int Radians;
    public string SelectedPlayers { get; set; }
    public string SelectedPlayer { get; set; }
    public Syncfusion.Blazor.DropDowns.SfListBox<string, Entities.Player> PlayersRequestingEntry;
    public Syncfusion.Blazor.DropDowns.SfListBox<string, Entities.Player> Players;
    protected override async Task OnInitializedAsync()
    {
        vm.PropertyChanged += vmPropertyChanged;
        await InvokeAsync(() => vm.Initialize(TableId));
        Radians = 360 / vm.Table.Players.Count;
        Console.WriteLine($"The game {(vm.Started ? "has" : "has not")} started");
        await vm.Deal();
    }
    protected override async void OnParametersSet()
    {
        base.OnParametersSet();
    }
    public void SelectedRequestingPlayerChanged(ListBoxChangeEventArgs<string, Entities.Player> args)
    {
        if (PlayersRequestingEntry.Value == null) return;
        var x = PlayersRequestingEntry.Value;
        vm.PlayerToAdmit = PlayersRequestingEntry.GetDataByValue(x).FirstOrDefault();
        StateHasChanged();
    }
    private async void vmPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private async void admitClicked(MouseEventArgs args)
    {
        await vm.Admit();
        await InvokeAsync(() => StateHasChanged());
    }
    private async void startGameClicked(MouseEventArgs args)
    {
        await vm.StartGame();
        await InvokeAsync(() => StateHasChanged());
    }
}
