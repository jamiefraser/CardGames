@page "/games/new"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Shared
@*@attribute [Authorize]*@
@inject HttpClient Http
@inject IHttpClientFactory factory;
<h3>Create Game</h3>
<style>
</style>
@if (game == null)
{
    <p><em>Initializing...</em></p>
}
else
{
    <EditForm Model="@game" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="flex-grid">
            <div class="col">
                <label>
                    What's it called?
                </label>
            </div>
            <div class="col">
                <InputText @bind-Value="game.Name" />
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    What kind of cards are used?
                </label>
            </div>
            <div class="col">
                <InputSelect @bind-Value="game.DeckType">
                    <option value=1 label="Standard"></option>
                    <option value=2 label="Phase 10"></option>
                </InputSelect>
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    How many decks are used?
                </label>
            </div>
            <div class="col">
                <InputNumber @bind-Value="game.NumberOfDecks" />
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    Minimum number of players?
                </label>
            </div>
            <div class="col">
                <InputNumber @bind-Value="game.MinimumPlayers" />
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    Maximum number of players?
                </label>
            </div>
            <div class="col">
                <InputNumber @bind-Value="game.MaxPlayers" />
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    How many cards in a hand?
                </label>
            </div>
            <div class="col">
                <InputNumber @bind-Value="game.NumberOfCardsToDeal" />
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    Each hand gets more cards (like Pay the Man)?
                </label>
            </div>
            <div class="col">
                <InputCheckbox @bind-Value="game.ProgressiveDeal" />
            </div>
        </div>
        @if (game.ProgressiveDeal)
        {
            <div class="flex-grid">
                <div class="col">
                    <label>
                        Increase deal by how many cards each hand?
                    </label>
                </div>

                <div class="col">
                    <InputNumber @bind-Value="game.IncrementCardsToDealBy" />
                </div>

            </div>
        }
        <div class="flex-grid">
            <div class="col">
                <label>
                    Use a discard pile?
                </label>
            </div>
            <div class="col">
                <InputCheckbox @bind-Value="game.UsesDiscardPile" />
            </div>
        </div>
        @if(game.UsesDiscardPile)
        {
            <div class="flex-grid">
                <div class="col">
                    <label>
                        Pick up whole discard pile?
                    </label>
                </div>
                <div class="col">
                    <InputCheckbox @bind-Value="game.PlayerPicksUpWholeDiscardPile"/>
                </div>
            </div>
        }
        <button type="submit">Submit</button>
    </EditForm>



}

@code {
    public string defaultDeckType = "";
    private async Task HandleValidSubmit()
    {
        var client = factory.CreateClient("gameAPI");
        try
        {
            await client.PostJsonAsync("/api/game", game);
        }
        catch (Exception ex)
        {

        }
    }
    private Game.Entities.Game game;

    protected override async Task OnInitializedAsync()
    {
        game = new Entities.Game();

    }
}
