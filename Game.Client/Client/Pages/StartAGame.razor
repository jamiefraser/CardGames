@page "/games/start"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Shared
@using Game.Client.Client.Services.CurrentUser
@using System.Linq
@using Game.Client.Client
@using Syncfusion.Blazor.DropDowns
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory factory
@inject ICurrentUserService currentUserService

<h3>Start a New Game</h3>
@if ((games == null || games.Count == 0) && !playersLoaded)
{
    <p><em>Initializing...</em></p>
}
else
{
    <EditForm Model="@gameTable" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="flex-grid">
            <div class="col">
                <label>
                    Choose a game
                </label>
            </div>
            <div class="col">
                <Game.Client.Client.Components.CustomInputSelect @bind-Value="gameTable.Game">
                    <option value="null" label="Select a game to play..." />
                    @foreach (Game.Entities.Game game in games)
                        {
                            <option value="@game" label="@game.Name" />
                        }
                </Game.Client.Client.Components.CustomInputSelect>
            </div>
        </div>
        <div class="flex-grid">
            <div class="col">
                <label>
                    Pick your players
                </label>
            </div>
            <div class="col">
                <SfListBox @bind-Value="@playerIds" DataSource="@players" TItem="Game.Entities.EasyAuthUserInfo" TValue="string[]">
                    <ListBoxSelectionSettings ShowCheckbox="true"></ListBoxSelectionSettings>
                    <ListBoxFieldSettings Text="PrincipalName" Value="PrincipalId"></ListBoxFieldSettings>
                </SfListBox>
            </div>
        </div>
        <button type="submit">Play on!</button>
    </EditForm>
}
@code
{
    private Game.Entities.Table gameTable;
    private List<Game.Entities.Game> games;
    private List<Game.Entities.EasyAuthUserInfo> players;
    private List<Game.Entities.EasyAuthUserInfo> registeredPlayers;
    private List<Game.Entities.EasyAuthUserInfo> usersFriends;
    bool playersLoaded;
    string[] playerIds;
    protected override async Task OnInitializedAsync()
    {
        playersLoaded = false;
        var graphSvc = factory.CreateClient("graphAPI");
        try
        {
            players = await graphSvc.GetFromJsonAsync<List<Entities.EasyAuthUserInfo>>("/api/users");
            players = players.Where(p => !p.PrincipalId.Equals(currentUserService.CurrentClaimsPrincipalOid)).ToList();
            playersLoaded = true;
        }
        catch (Exception ex)
        {
            //do something useful
            //then release the UI
            playersLoaded = true;
        }
        registeredPlayers = new List<Entities.EasyAuthUserInfo>();
        usersFriends = new List<Entities.EasyAuthUserInfo>();
        var client = factory.CreateClient("gameAPI");
        games = await client.GetFromJsonAsync<List<Game.Entities.Game>>("api/game");
        gameTable = new Entities.Table();
    }
    private async Task HandleValidSubmit()
    {
        var selectedPlayers = new List<Entities.Player>();
        foreach(var user in players.Where(p => playerIds.Contains(p.PrincipalId)))
        {
            selectedPlayers.Add(user.ToPlayer());
        }
        gameTable.InvitedPlayers = selectedPlayers;
        var tableService = factory.CreateClient("tableAPI");
        try
        {
            var result = await tableService.PostAsJsonAsync<Entities.Table>("/api/tables",gameTable);
        }
        catch(Exception ex)
        {

        }
    }
}
