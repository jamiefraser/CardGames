@page "/games/start"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Shared
@using Game.Client.Shared.Services.CurrentUser
@using System.Linq
@using Game.Client.Client
@using Syncfusion.Blazor.DropDowns
@using Game.Client.Shared.ViewModels;
@using System.ComponentModel
@using System.Collections.Specialized
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory factory
@inject ICurrentUserService currentUserService
@inject IStartAGameViewModel vm;
@implements IDisposable
@attribute [Authorize]
<h3>Start a New Game</h3>
@if ((vm.Games == null || vm.Games.Count == 0))
{
    <p><em>Initializing...</em></p>
}
else
{
<EditForm Model="@vm" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="flex-grid">
        <div class="col">
            <label>
                Choose a game
            </label>
        </div>
        <div class="col">
            <Syncfusion.Blazor.DropDowns.SfComboBox DataSource="vm.Games" TItem="Entities.Game" TValue="Entities.Game" @bind-Value="vm.SelectedGame">
                <ComboBoxFieldSettings Text="Name" Value="RowKey" />
            </Syncfusion.Blazor.DropDowns.SfComboBox>
        </div>
    </div>
    <div class="flex-grid">
        <div class="col">
            <label>
                Pick your players
            </label>
        </div>
        <div class="col">
            <SfListBox DataSource="@vm.Players" TItem="Entities.Player" TValue="string[]">
                <ListBoxFieldSettings Text="PrincipalName" Value="PrincipalId"></ListBoxFieldSettings>
                <ListBoxSelectionSettings ShowCheckbox="true" CheckboxPosition="CheckBoxPosition.Right" />
            </SfListBox>
        </div>
    </div>
    <button type="submit">Play on!</button>
    <ValidationSummary />
</EditForm>
}
@code
{
    private Game.Entities.Table gameTable;
    private List<Game.Entities.Game> games;
    private List<Game.Entities.EasyAuthUserInfo> players;
    private List<Game.Entities.EasyAuthUserInfo> registeredPlayers;
    private List<Game.Entities.EasyAuthUserInfo> usersFriends;
    bool playersLoaded;
    string[] playerIds;
    protected override async Task OnInitializedAsync()
    {
        vm.PropertyChanged += vmPropertyChanged;
        playersLoaded = false;

        registeredPlayers = new List<Entities.EasyAuthUserInfo>();
        usersFriends = new List<Entities.EasyAuthUserInfo>();

        gameTable = new Entities.Table();
    }
    private async void vmPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }
    private async void PlayersChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        Console.WriteLine(args.Action);
        await InvokeAsync(() => StateHasChanged());
    }
    private async Task HandleValidSubmit()
    {

        var tableService = factory.CreateClient("tableAPI");
        try
        {
            var result = await tableService.PostAsJsonAsync<Entities.Table>("/api/tables", vm.GameTable);
        }
        catch (Exception ex)
        {

        }
    }
    public void Dispose()
    {
        vm.PropertyChanged -= vmPropertyChanged;
        vm = null;
    }
}
