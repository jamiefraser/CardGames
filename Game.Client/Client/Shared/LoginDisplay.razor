@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Shared.Services.CurrentUser;
@using Syncfusion.Blazor.Navigations;
@using System.Linq;
@using StateManager;
@using Microsoft.AspNetCore.SignalR.Client
@using Game.Client.Shared.Services.SignalRService;
@using Game.Client.Client
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject ICurrentUserService currentUser;
@inject TasksStateService tasksStateService
@inject ISignalRService signalR;
@inject HttpClient Http
@inject IHttpClientFactory factory
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISignalRService rtc;
@inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider tokenProvider; 
<AuthorizeView>
    <Authorized>
        <table width="100%" style="display:flex;">
            <tr>
                <td style="text-align:start;width:calc(50vw);">
                    <div class="control-section">
                        <div class="menu-control">
                            @if (Ready)
                            {
                                <SfMenu Items="@menuItems">
                                    <MenuEvents TValue="MenuItem" ItemSelected="@menuClicked">
                                    </MenuEvents>
                                </SfMenu>
                            }
                            else
                            {
                                <div>
                                    Hang tight - finishing getting you setup!
                                </div>
                            }
                        </div>
                    </div>
                </td>
                <td style="text-align:right;width:calc(100vw);">
                    Hello, @context.User.Identity.Name!
                    <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
                </td>
            </tr>
        </table>
        @{
            currentUser.CurrentClaimsPrincipal = @context.User;
            Task.Run(async () =>
            {
                var t = await tokenProvider.RequestAccessToken();
                System.Diagnostics.Debug.WriteLine(t);
            });

            currentUser.CurrentClaimsPrincipalOid = @context.User.Claims.Where(c => c.Type == "oid").FirstOrDefault().Value;
            //Helpers.UpdateStatus(currentUser.CurrentClaimsPrincipal, factory, true);
        }
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
        @{
            Task.Run(async () =>
            {
            //await UpdateStatus(currentUser.CurrentClaimsPrincipal, false);
        });
        }
    </NotAuthorized>
</AuthorizeView>
<style>
    @@font-face {
        font-family: 'em-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .em-icons {
        font-family: 'em-icons';
    }

    .e-file::before {
        content: '\e700';
    }

    .e-edit::before {
        content: '\e701';
    }

    .e-tool::before {
        content: '\e7cf';
    }

    .e-cut::before {
        content: '\e704';
    }

    .e-copy::before {
        content: '\e705';
    }

    .e-paste::before {
        content: '\e706';
    }

    .e-open::before {
        content: '\e702';
    }

    .e-save::before {
        content: '\e703';
    }

    .menu-control {
        margin: auto auto auto 10;
        text-align: center;
    }
</style>
@code{
    private PresenceStatus presenceStatus;
    private List<string> messages = new List<string>();
    private async Task BeginLogout(MouseEventArgs args)
    {
        currentUser.SigningOutClaimsPrincipal = currentUser.CurrentClaimsPrincipal;
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override async Task OnInitializedAsync()
    {
        rtc.ReadyStateChanged += ReadyStateChanged;
        Console.WriteLine(signalR.AccessToken);
        authenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChanged;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null && authState.User != null && authState.User.Identities.First().IsAuthenticated)
        {
            AccessToken t;
            Console.WriteLine(authState.User.Identities.First().BootstrapContext);
            var acquiredToken = (await tokenProvider.RequestAccessToken()).TryGetToken(out t);
            currentUser.AuthToken = t.Value.ToString();
            await signalR.InitializeAsync();
            await signalR.UpdateStatus(true);
        }
    }
    private async void AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var x = task.Result.User;
        if (state != null && state.User.Identity.IsAuthenticated)
        {
            AccessToken t;
            var acquiredToken = (await tokenProvider.RequestAccessToken()).TryGetToken(out t);
            currentUser.AuthToken = t.Value.ToString();
            await signalR.InitializeAsync();
            await signalR.UpdateStatus(true);
        }
        else
        {
            await signalR.UpdateStatus(false);
            currentUser.SigningOutClaimsPrincipal = null;
            await signalR.DisconnectSignalR();
        }
    }
    private List<MenuItem> menuItems = new List<MenuItem>{
            new MenuItem
            {
                Text = "Games",
                IconCss = "em-icons e-file",
                Items = new List<MenuItem>
            {
                    new MenuItem { Text= "Start / Join a Game", IconCss= "em-icons e-open" },
                    new MenuItem { Text= "Create A New Game", IconCss= "em-icons e-edit" }
                }
            }
            };
    private void menuClicked(MenuEventArgs<MenuItem> args)
    {
        if (args.Item.Text.Equals("Start / Join a Game"))
        {
            Navigation.NavigateTo("/games/start");
            return;
        }
        if (args.Item.Text.Equals("Create A New Game"))
        {
            Navigation.NavigateTo("/games/new");
            return;
        }
    }

    protected async void ReadyStateChanged(object sender, ReadyStateChangedEventArgs args)
    {
        Ready = args.Ready;
        StateHasChanged();
    }
    public bool Ready { get; set; }
}
