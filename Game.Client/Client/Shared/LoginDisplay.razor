@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Client.Services.CurrentUser;
@using System.Linq;
@using StateManager;
@using Microsoft.AspNetCore.SignalR.Client
@using Game.Client.Client.Services.SignalRService;
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject ICurrentUserService currentUser;
@inject TasksStateService tasksStateService
@inject ISignalRService signalR;
@inject HttpClient Http
@inject IHttpClientFactory factory
<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity.Name!
        @{
            currentUser.CurrentClaimsPrincipal = @context.User;
            currentUser.CurrentClaimsPrincipalOid = @context.User.Claims.Where(c => c.Type == "oid").FirstOrDefault().Value;
            tasksStateService.BeforeUnload += BeforeUnload;
        }

        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
        @{
            tasksStateService.BeforeUnload -= BeforeUnload;
        }
    </NotAuthorized>
</AuthorizeView>

@code{
    private PresenceStatus presenceStatus;
    private List<string> messages = new List<string>();
    private async Task BeginLogout(MouseEventArgs args)
    {
        var ps = factory.CreateClient("presenceAPI");
        await ps.PostAsJsonAsync("api/messages", "hello from the logindisplay component!");
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    private async Task CreateEasyAuthUserRecord(System.Security.Claims.ClaimsPrincipal principal)
    {
    }
    protected override async Task OnInitializedAsync()
    {
       

    }
    protected async Task BeforeUnload()
    {
        Console.WriteLine("Before Unload is happening now!  You could deregister presence here if you like");
    }
}
