@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Game.Client.Shared.Services.CurrentUser;
@using System.Linq;
@using StateManager;
@using Microsoft.AspNetCore.SignalR.Client
@using Game.Client.Shared.Services.SignalRService;
@using Game.Client.Client
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject ICurrentUserService currentUser;
@inject TasksStateService tasksStateService
@inject ISignalRService signalR;
@inject HttpClient Http
@inject IHttpClientFactory factory
@inject AuthenticationStateProvider authenticationStateProvider

<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity.Name!
        @{
            currentUser.CurrentClaimsPrincipal = @context.User;
            currentUser.CurrentClaimsPrincipalOid = @context.User.Claims.Where(c => c.Type == "oid").FirstOrDefault().Value;
            //Helpers.UpdateStatus(currentUser.CurrentClaimsPrincipal, factory, true);
        }

        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
        @{
            Task.Run(async () =>
            {
                //await UpdateStatus(currentUser.CurrentClaimsPrincipal, false);
            });
        }
    </NotAuthorized>
</AuthorizeView>

@code{
    private PresenceStatus presenceStatus;
    private List<string> messages = new List<string>();
    private async Task BeginLogout(MouseEventArgs args)
    {
        currentUser.SigningOutClaimsPrincipal = currentUser.CurrentClaimsPrincipal;
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(signalR.AccessToken);
        authenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChanged;
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState != null && authState.User != null)
        {
            await Helpers.UpdateStatus(authState.User, factory, true);
        }
    }
    private async void AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        var x = task.Result.User;
        if (state != null)
        {
            await Helpers.UpdateStatus(currentUser.CurrentClaimsPrincipal, factory, true);
        }
        else
        {
            await Helpers.UpdateStatus(currentUser.SigningOutClaimsPrincipal, factory, false);
            currentUser.SigningOutClaimsPrincipal = null;
        }
    }
}
