@using Game.Client.Shared.ViewModels 
@using Game.Client.Shared 
@inject IHttpClientFactory clientFactory; 
<ul class="@GetCorrectClass()" style="@getStyle()">
    @foreach (Game.Entities.Card c in Cards.OrderByDescending(card => card.Rank))
    {
        if (DeckType.Equals(Entities.DeckType.Phase10))
        {
            var converted = c.ConvertColourToSuit();
            c.Suit = converted.Suit;
        }
        if (MyHand)
        {
            <Card TheCard="@c" DeckType="@DeckType" OpponentsCard="false" OnClicked="CardClicked"/>
        }
        else
        {
            <Card Suit="@c.Suit" Rank="@c.Rank" DeckType="@DeckType" OpponentsCard="true" />
        }
    }
</ul>


@code {
    [Parameter]
    public IPlayGameViewModel vm { get; set; }
    [Parameter]
    public List<Game.Entities.Card> Cards { get; set; }
    [Parameter]
    public Entities.DeckType DeckType { get; set; }
    [Parameter]
    public bool MyHand { get; set; }
    public string GetCorrectClass()
    {
        if (MyHand)
        {
            return "hand";
        }
        else
        {
            return "hand";
        }
    }
    public string getStyle()
    {
        if (!MyHand)
        {
            return "pointer-events:none;";
        }
        return "";
    }
    public Action<Entities.Card> CardClicked;
    protected override Task OnParametersSetAsync()
    {
        CardClicked = new Action<Entities.Card>(async(card) =>
        {
            var index = this.Cards.IndexOf(card);
            if (card.Selected)
            {
                vm.SelectedCards.Add(card);
            }
            else
            {
                try
                {
                    vm.SelectedCards.Remove(card);
                }
                catch { }
            }
            var client = clientFactory.CreateClient("tableAPI");
            await client.GetAsync($"api/tables/hand/{vm.Table.Id}/selected/{index}");
            vm.PropertyChanged += async (s, e) =>
            {
                await InvokeAsync(() => StateHasChanged());
            };
        });
        return base.OnParametersSetAsync();
    }
}
