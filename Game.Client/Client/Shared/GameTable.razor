@using Game.Client.Shared.ViewModels
@using Game.Client.Client.Shared
@inject Game.Client.Shared.Services.CurrentUser.ICurrentUserService currentUserService
@{
    var n_imgs = vm.Table.Players.Count;
    var has_mid = 0;
    var m = n_imgs - has_mid;
    decimal tan = System.Convert.ToDecimal(Math.Tan(Math.PI / m));
}
<div class="container" style="@getContainerStyle(m, tan)">
    <div>
        <div class="playingCards fourColours rotateHand simpleCards">
            <Deck Cards="@vm.Table.Deck.Cards" />
        </div>
    </div>
    @{
        var counter = 1;
        foreach (KeyValuePair<int, Entities.Player> p in vm.Table.Players)
        {
            <div class="playingCards fourColours rotateHand simpleCards" style="@getDivStyle(counter, p.Value.PrincipalId, vm.Table.Players.Count);width:calc(20px * @p.Value.Hand.Count);--manualRadius:calc(2.5px * @p.Value.Hand.Count);">
                <div class="table">
                    <div>
                        @if (p.Value.PrincipalId == currentUserService.CurrentClaimsPrincipalOid)
                        {
                            <Hand Cards="p.Value.Hand" DeckType="vm.Table.Game.DeckType" MyHand="true" vm="@vm" />
                        }
                        else
                        {
                            <div>
                                <div>
                                    <Hand Cards="p.Value.Hand" DeckType="vm.Table.Game.DeckType" MyHand="false" vm="@vm" />
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            counter++;
        }
    }
</div>
@*}*@
@code{
    [Parameter]
    public Game.Client.Shared.ViewModels.IPlayGameViewModel vm { get; set; }
    private async void dealClicked(MouseEventArgs args)
    {
        await vm.Deal();
        await InvokeAsync(() => StateHasChanged());
    }
    public string getDivStyle(int i, string principalId, int playerCount)
    {
        string styleText = "";
        if (principalId.Equals(currentUserService.CurrentClaimsPrincipalOid))
        {
            styleText = styleText + $"--i: {i}; ";
        }
        else
        {
            styleText = styleText + $"--i: {i}; pointer-events:none; ";
        }
        return styleText;
    }
    public string GetLayoutClass(string baseClassNames, int position)
    {
        return baseClassNames + " " + layoutPositions[position];
    }
    public string getContainerStyle(decimal m, decimal tan)
    {
        return $"--m: {m}; --tan: {Math.Abs(tan)}";
    }
    private string[] layoutPositions = { "deg0", "deg45", "deg135", "deg180", "deg225", "deg315" };
    protected override async Task OnInitializedAsync()
    {
        vm.PropertyChanged += async (s,e) => await InvokeAsync(() => StateHasChanged());
    }
}
